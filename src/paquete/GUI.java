/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package paquete;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.DirectoryStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.attribute.BasicFileAttributes;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.Duration;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;


/**
 *
 * @author Sistemas
 */
public class GUI extends javax.swing.JFrame {
         DefaultTableModel model = new DefaultTableModel(); 
         String LocalHostConnectionPath="jdbc:mysql://localhost:3306/contarfolios?verifyServerCertificate=false&useSSL=false&requireSSL=false&serverTimezone=UTC";
         String LocalHostConnectionUsername="root";
         String LocalHostConnectionPassword="root";
         String [] Meses= new String[13];
         int ColumnaSerie=0;
         int FilaMes=0;
         int MatrizPrincipal [][]=new int [9][13];
    
    public GUI() {
        Meses[1]="Enero";
        Meses[2]="Febrero";
        Meses[3]="Marzo";
        Meses[4]="Abril";
        Meses[5]="Mayo";
        Meses[6]="Junio";
        Meses[7]="Julio";
        Meses[8]="Agosto";
        Meses[9]="Septiembre";
        Meses[10]="Octubre";
        Meses[11]="Noviembre";
        Meses[12]="Diciembre";
        initComponents();
        jTable1.setModel(model);
        model.addColumn("     "); 
        FilaMes=1;
        do{
        model.addColumn(Meses[FilaMes]);
        FilaMes++;
        }while(FilaMes<=12);
        FilaMes=0;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jComboBox1 = new javax.swing.JComboBox<>();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paquete/rsz_infoicon.png"))); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2017", "2018", "2019", "2020", "2021", "2022", "2023", "2024", "2025" }));

        jButton2.setText("Exportar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 940, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addGap(66, 66, 66)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(105, 105, 105)
                .addComponent(jButton1)
                .addGap(372, 372, 372))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 370, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton2))))
                .addGap(26, 26, 26))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed

    }//GEN-LAST:event_formKeyPressed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        //System.out.println("Incio: "+ System.nanoTime());
        long startTime = System.nanoTime();   
        LimpiarBaseDeDatos();
    //    System.out.println("Limpieza de BD Terminada");
    StringBuilder [] Rutas= new StringBuilder[10];
    StringBuilder [] Series= new StringBuilder[10];
    int [] Totales= new int [13];
        
    Rutas[1]=new StringBuilder("S:\\programa\\FACTURAS\\ALM\\XML");
    Series[1]=new StringBuilder("ALM");
    Rutas[2]=new StringBuilder("S:\\programa\\FACTURAS\\ALB\\XML");
    Series[2]=new StringBuilder("ALB");
    Rutas[3]=new StringBuilder("S:\\programa\\FACTURAS\\ATT\\XML");
    Series[3]=new StringBuilder("ATT");
    Rutas[4]=new StringBuilder("S:\\programa\\FACTURAS\\CRE\\XML");
    Series[4]=new StringBuilder("CRE");
    Rutas[5]=new StringBuilder("S:\\programa\\FACTURAS\\IRA\\XML");
    Series[5]=new StringBuilder("IRA");
    Rutas[6]=new StringBuilder("S:\\programa\\FACTURAS\\NCR\\XML");
    Series[6]=new StringBuilder("NCR");
    Rutas[7]=new StringBuilder("S:\\programa\\FACTURAS\\RPA\\XML");
    Series[7]=new StringBuilder("RPA");
    Rutas[8]=new StringBuilder("S:\\programa\\FACTURAS\\STA\\XML");
    Series[8]=new StringBuilder("STA");
    
    int contador=1;
    do {
        ColumnaSerie=contador;
        //metodo anterior
        //revisarCarpeta(Rutas[contador], Series[contador]);
        //revisarCarpeta(Rutas[8], Series[8]);
        //metodo nuevo
        ObtenerNombresDeArchivoPrueba(Rutas[contador], Series[contador]);
        //ObtenerNombresDeArchivoPrueba(Rutas[8], Series[8]);
        contador++;
    }while(contador<=8);
    
    model.setNumRows(0);
    ColumnaSerie=0;
    do{
    ColumnaSerie++;    
    if(ColumnaSerie<=8){
    model.addRow(new Object[]{
        Series[ColumnaSerie], 
        MatrizPrincipal[ColumnaSerie][1],
        MatrizPrincipal[ColumnaSerie][2],
        MatrizPrincipal[ColumnaSerie][3],
        MatrizPrincipal[ColumnaSerie][4],
        MatrizPrincipal[ColumnaSerie][5],
        MatrizPrincipal[ColumnaSerie][6],
        MatrizPrincipal[ColumnaSerie][7],
        MatrizPrincipal[ColumnaSerie][8],
        MatrizPrincipal[ColumnaSerie][9],
        MatrizPrincipal[ColumnaSerie][10],
        MatrizPrincipal[ColumnaSerie][11],
        MatrizPrincipal[ColumnaSerie][12]
    });
    }
    
    }while(ColumnaSerie<=8);
    
    FilaMes=1;
    do
    { if(FilaMes<=12){
        Totales[FilaMes]=
            MatrizPrincipal[1][FilaMes]+
            MatrizPrincipal[2][FilaMes]+
            MatrizPrincipal[3][FilaMes]+
            MatrizPrincipal[4][FilaMes]+
            MatrizPrincipal[5][FilaMes]+
            MatrizPrincipal[6][FilaMes]+
            MatrizPrincipal[7][FilaMes]+
            MatrizPrincipal[8][FilaMes];}
    FilaMes++;
    }while(FilaMes<=12);
    
    model.addRow(new Object[]{
        "Total", 
        Totales[1],
        Totales[2],
        Totales[3],
        Totales[4],
        Totales[5],
        Totales[6],
        Totales[7],
        Totales[8],
        Totales[9],
        Totales[10],
        Totales[11],
        Totales[12]
    });
long endTime = System.nanoTime();
long duration = (endTime - startTime);
long milliseconds = TimeUnit.MILLISECONDS.convert(duration, TimeUnit.NANOSECONDS);
long minutes = (milliseconds / 1000) / 60;
long seconds = (milliseconds / 1000) % 60;
System.out.println("Duracion "+milliseconds+"="+ minutes + "minutos y" +seconds+ "segundos");
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
JFileChooser fc = new JFileChooser();
                int option = fc.showSaveDialog(GUI.this);
                if(option == JFileChooser.APPROVE_OPTION){
                    String filename = fc.getSelectedFile().getName(); 
                    String path = fc.getSelectedFile().getParentFile().getPath();

					int len = filename.length();
					String ext = "";
					String file = "";

					if(len > 4){
						ext = filename.substring(len-4, len);
					}

					if(ext.equals(".xls")){
						file = path + "\\" + filename; 
					}else{
						file = path + "\\" + filename + ".xls"; 
					}
					toExcel(jTable1, new File(file));
				}
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }
    
        
        public StringBuilder[] ObtenerNombresDeArchivo(StringBuilder ruta){     
        File folder = new File(ruta.toString());
        File[] listOfFiles = folder.listFiles();
        StringBuilder [] NombresArchivos= new StringBuilder[listOfFiles.length];
         for (int i = 0; i < listOfFiles.length; i++) {
         if (listOfFiles[i].isFile()) {
             NombresArchivos[i]=new StringBuilder(listOfFiles[i].getName());
        } else if (listOfFiles[i].isDirectory()) {
        
  }
}        
         return NombresArchivos;
    
    }
        
        public String ConvertirFecha(String FechaAuxiliar){
//            String FechaAuxiliar=creationDate.toString();
            String dia=FechaAuxiliar.substring(8, 10);
            String mesAuxiliar=FechaAuxiliar.substring(4,7);
            String anio=FechaAuxiliar.substring(24,28);
        String mes="";
            switch(mesAuxiliar) 
        { 
            case "Jan": 
                mes="01";
                break; 
            case "Feb": 
                mes="02";
                break; 
            case "Mar": 
                mes="03";
                break;
            case "Apr": 
                mes="04";
                break;
            case "May": 
                mes="05";
                break;
            case "Jun": 
                mes="06";
                break;
            case "Jul": 
                mes="07";
                break;
            case "Aug": 
                mes="08";
                break; 
            case "Sep": 
                mes="09";
                break;
            case "Oct": 
                mes="10";
                break;
            case "Nov": 
                mes="11";
                break;
            case "Dec": 
                mes="12";
                break;
            default: 
                System.out.println("no match"); 
        }
            String fecha=anio+"-"+mes+"-"+dia;
             return fecha;
            
        }
        
        
        
       public void ObtenerNombresDeArchivoPrueba(StringBuilder ruta, StringBuilder serie){
//       System.out.println("Inicio Serie "+ serie+ ": "+ System.nanoTime());
       Path folder = Paths.get(ruta.toString());
       //INSERT INTO carpeta (Nombre,Fecha,Serie)VALUES ("Prueba","2019-05-27","ALM"),("Prueba","2019-05-27","ALM");
       
       StringBuilder query = new StringBuilder("INSERT INTO carpeta (Nombre,Fecha,Serie)VALUES "); 
       //String query="INSERT INTO carpeta (Nombre,Fecha,Serie)VALUES ";
       try (DirectoryStream<Path> stream = Files.newDirectoryStream(folder, "*.xml")) {
       for (Path entry : stream) {
       StringBuilder Nombre=new StringBuilder(entry.getFileName()+"");
       StringBuilder FechaDeCreacion=null;
       StringBuilder rutaCompleta= new StringBuilder(ruta +"\\"+Nombre);
       File file = new File(rutaCompleta.toString()); 
       Path filePath = file.toPath();
       BasicFileAttributes attributes = null;
       try
        {
            attributes =
                    Files.readAttributes(filePath, BasicFileAttributes.class);
        }
        catch (IOException exception)
        {
          //  System.out.println("Exception handled when trying to get file " +
              //      "attributes: " + exception.getMessage());
        }
        long milliseconds = attributes.creationTime().to(TimeUnit.MILLISECONDS);
        if((milliseconds > Long.MIN_VALUE) && (milliseconds < Long.MAX_VALUE))
        {
            Date creationDate =
                    new Date(attributes.creationTime().to(TimeUnit.MILLISECONDS));
            
//            FechaDeCreacion=attributes.creationTime().toString().substring(0, 10);
            FechaDeCreacion=new StringBuilder(creationDate.getDate()+(creationDate.getMonth()+1)+(creationDate.getYear()+1900)+"");
            StringBuilder dia=null;
            if(creationDate.getDate()>10)
            {dia=new StringBuilder(creationDate.getDate()+"");}
            else
            {dia=new StringBuilder("0"+creationDate.getDate()+"");}    
            
            StringBuilder mes=null;
            int month=creationDate.getMonth()+1;
            if(month>10)
            {mes=new StringBuilder(month+"");}
            else
            {mes=new StringBuilder("0"+month+"");}    
            
            StringBuilder anio=new StringBuilder(creationDate.getYear()+1900+"");
            FechaDeCreacion=new StringBuilder(anio+"-"+mes+"-"+dia);
            //FechaDeCreacion=ConvertirFecha(creationDate.toString());
            //System.out.println(FechaDeCreacion);
            //INSERT INTO carpeta (Nombre,Fecha,Serie)VALUES ("Prueba","2019-05-27","ALM"),("Prueba","2019-05-27","ALM");
            query.append("(");
            query.append('"');
            query.append(Nombre);
            query.append('"');
            query.append(',');
            query.append('"');
            query.append(FechaDeCreacion);
            query.append('"');
            query.append(',');
            query.append('"');
            query.append(serie);
            query.append('"');
            query.append(')');
            query.append(',');
//query=query+"("+'"'+Nombre+'"'+','+'"'+FechaDeCreacion+'"'+','+'"'+serie+'"'+')'+',';
    }
} 
    // An I/O problem has occurred
}            catch (IOException ex) {
                 Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
             }
       query.deleteCharAt(query.length()-1);
       query.append(';');
       //String query2=query.substring(0, query.length()-1)+';';
       //String query2=query.toString();
       //System.out.println("Serie "+ serie+ " enviado a BD "+ System.nanoTime());    
       EnviarABaseDeDatosPrueba(query);
            int contadorDeMeses=1;
        FilaMes=contadorDeMeses;
        do{
        MatrizPrincipal[ColumnaSerie][FilaMes]=Contar(FilaMes, serie);
        contadorDeMeses++;
        FilaMes=contadorDeMeses;
        }
        while(contadorDeMeses<=12);
    }
       
        public void EnviarABaseDeDatosPrueba(StringBuilder query){
    Connection connection=null;
    ResultSet resultados=null;
    try{
    connection=DriverManager.getConnection(LocalHostConnectionPath,LocalHostConnectionUsername,LocalHostConnectionPassword);
    PreparedStatement statement= connection.prepareStatement(query.toString());
    statement.executeUpdate();
    statement.close();
    connection.close();
    }catch(SQLException exception){
        JOptionPane.showMessageDialog(null, exception);
        System.err.println(exception);
    }
    }
        public int TotalDeArchivos(StringBuilder ruta){
        File folder = new File(ruta.toString());
        File[] listOfFiles = folder.listFiles();
        int cantidad=listOfFiles.length;
        return cantidad;
    
    }
        
        public void revisarCarpetaPrueba(StringBuilder ruta,StringBuilder Serie){
        int contadorDeMeses=1;
        FilaMes=contadorDeMeses;
        do{
        MatrizPrincipal[ColumnaSerie][FilaMes]=Contar(FilaMes, Serie);
        contadorDeMeses++;
        FilaMes=contadorDeMeses;
        }
        while(contadorDeMeses<=12);
    }
        
        
        public StringBuilder ObtenerFechadeCreacion(StringBuilder ruta, StringBuilder NombreDeArchivo){
        StringBuilder diagonal =new StringBuilder("\\");
        //String FechaDeCreacion="";
        StringBuilder FechaDeCreacion=null;
        StringBuilder rutaCompleta=new StringBuilder(ruta +"\\"+NombreDeArchivo);
        //    System.out.println(rutaCompleta);
        File file = new File(rutaCompleta.toString());
        Path filePath = file.toPath();

        BasicFileAttributes attributes = null;
        try
        {
            attributes =
                    Files.readAttributes(filePath, BasicFileAttributes.class);
        }
        catch (IOException exception)
        {
          //  System.out.println("Exception handled when trying to get file " +
              //      "attributes: " + exception.getMessage());
        }
        long milliseconds = attributes.creationTime().to(TimeUnit.MILLISECONDS);
        if((milliseconds > Long.MIN_VALUE) && (milliseconds < Long.MAX_VALUE))
        {
            Date creationDate =
                    new Date(attributes.creationTime().to(TimeUnit.MILLISECONDS));

           /// System.out.println("File " + filePath.toString() + " created " +
           //         creationDate.getDate() + "/" +
           //         (creationDate.getMonth() + 1) + "/" +
           //         (creationDate.getYear() + 1900));
            
            FechaDeCreacion=new StringBuilder(creationDate.getDate()+(creationDate.getMonth()+1)+(creationDate.getYear()+1900)+"");
            StringBuilder dia=null;
            if(creationDate.getDate()>10)
            {dia=new StringBuilder(creationDate.getDate()+"");}
            else
            {dia=new StringBuilder("0"+creationDate.getDate()+"");}    
            
            StringBuilder mes=null;
            int month=creationDate.getMonth()+1;
            if(month>10)
            {mes=new StringBuilder(month+"");}
            else
            {mes=new StringBuilder("0"+month+"");}    
            
            StringBuilder anio=new StringBuilder(creationDate.getYear()+1900+"");
            
            //System.out.println(dia);
            //System.out.println(mes);
            //System.out.println(anio);
            
            FechaDeCreacion=new StringBuilder(anio+"-"+mes+"-"+dia);
        }
        
        return FechaDeCreacion;
        
        }
        
        public void EnviarABaseDeDatos(StringBuilder [] NombresArchivos, StringBuilder [] FechaDeCreacion,StringBuilder Serie){
        int contador=NombresArchivos.length;
        //INSERT INTO carpeta (Nombre,Fecha,Serie)VALUES ("Prueba","2019-05-27","ALM"),("Prueba","2019-05-27","ALM");
        StringBuilder query=new StringBuilder("INSERT INTO carpeta (Nombre,Fecha,Serie)VALUES ");
            do{
                contador--;
                if(contador>=0){
                query.append('(');
                query.append('"');
                query.append(NombresArchivos[contador]);
                query.append('"');
                query.append(',');
                query.append('"');
                query.append(FechaDeCreacion[contador]);
                query.append('"');
                query.append(',');
                query.append('"');
                query.append(Serie);
                query.append('"');
                query.append(")");}
                query.append(",");
               // System.out.println(contador);
                    }while(contador>0);
       query.deleteCharAt(query.length()-1);
       query.append(';');
            System.out.println(query.toString());
       // System.out.println(query);   
    //Hasta aqui parece que la query va bien, falta realizar los cambios en la tabla y continuar modificando este metodo
    Connection connection=null;
    ResultSet resultados=null;
    try{
    connection=DriverManager.getConnection(LocalHostConnectionPath,LocalHostConnectionUsername,LocalHostConnectionPassword);
    PreparedStatement statement= connection.prepareStatement(query.toString());
    statement.executeUpdate();
    statement.close();
    connection.close();
    }catch(SQLException exception){
        JOptionPane.showMessageDialog(null, exception);
        System.err.println(exception);
    }
    }
        
    public void revisarCarpeta(StringBuilder ruta,StringBuilder Serie){
        //String ruta="C:\\Users\\Sistemas\\Downloads\\FACTURAF6342";
        
        StringBuilder [] NombresArchivos=ObtenerNombresDeArchivo(ruta);
        StringBuilder [] FechasCreacionArchivos= new StringBuilder[NombresArchivos.length];
        //System.out.println(NombresArchivos[0]);
        //ObtenerFechadeCreacion(ruta, NombresArchivos[0]);
        int contador=NombresArchivos.length-1;
        
        do{
            FechasCreacionArchivos[contador]=ObtenerFechadeCreacion(ruta, NombresArchivos[contador]);
            contador--;
        }while(contador>=0);
        
        EnviarABaseDeDatos(NombresArchivos, FechasCreacionArchivos, Serie);
        int contadorDeMeses=1;
        FilaMes=contadorDeMeses;
        do{
        MatrizPrincipal[ColumnaSerie][FilaMes]=Contar(FilaMes, Serie);
        contadorDeMeses++;
        FilaMes=contadorDeMeses;
        }
        while(contadorDeMeses<=12);
    }

    public int Contar(int month, StringBuilder Serie){
    int year=(jComboBox1.getSelectedIndex())+2017;
    StringBuilder query=new StringBuilder("SELECT COUNT(Nombre) FROM carpeta WHERE ");
    query.append("MONTH(Fecha)=");
    query.append(month);
    query.append(" AND ");
    query.append("YEAR(Fecha)=");
    query.append(year);
    query.append(" AND ");
    query.append("Serie=");
    query.append('"');
    query.append(Serie);
    query.append('"');
    int contar=0;
    Connection connection=null;
    ResultSet resultados=null;
    try{
//System.out.println(username +" " +password);
connection=DriverManager.getConnection(LocalHostConnectionPath,LocalHostConnectionUsername,LocalHostConnectionPassword);
PreparedStatement statement= connection.prepareStatement(query.toString());
resultados=statement.executeQuery();
while (resultados.next()){
    contar=resultados.getInt("COUNT(Nombre)");
// System.out.println(contar);
}
statement.close();
connection.close();

    }catch(SQLException exception){
        JOptionPane.showMessageDialog(null, exception);
        System.err.println(exception);
    }
    return contar;
    }

    public void LimpiarBaseDeDatos(){
    StringBuilder query=new StringBuilder("DELETE FROM carpeta WHERE Serie IS NOT NULL");
    Connection connection=null;
    ResultSet resultados=null;
    try{
    connection=DriverManager.getConnection(LocalHostConnectionPath,LocalHostConnectionUsername,LocalHostConnectionPassword);
    PreparedStatement statement= connection.prepareStatement(query.toString());
    statement.executeUpdate();
    statement.close();
    connection.close();
    }catch(SQLException exception){
        JOptionPane.showMessageDialog(null, exception);
        System.err.println(exception);
    }
    }

        public void toExcel(JTable table, File file){
		try{
			TableModel model = table.getModel();
			FileWriter excel = new FileWriter(file);

			for(int i = 0; i < model.getColumnCount(); i++){
				excel.write(model.getColumnName(i) + "\t");
			}

			excel.write("\n");

			for(int i=0; i< model.getRowCount(); i++) {
				for(int j=0; j < model.getColumnCount(); j++) {
					excel.write(model.getValueAt(i,j).toString()+"\t");
				}
				excel.write("\n");
			}

			excel.close();
		}catch(IOException e){ System.out.println(e); }
	}    

    
    
            
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
